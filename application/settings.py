"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import dj_database_url
from pathlib import Path
from decouple import config
from datetime import timedelta
from urllib.parse import quote

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret! 
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production! 
DEBUG = config('DEBUG',True,cast=bool)

ALLOWED_HOSTS = [
    '127.0.0.1',
    'portfolio-api-vwdg.onrender.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'knox',
    'rest_framework.authtoken',
    'drf_spectacular',
    'corsheaders',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_rest_passwordreset',
    'profiles.apps.ProfilesConfig',
    'pocket',
    'projects',
    'experiences',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
	'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'application.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR/'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'application.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Generate the postgres url in local environment
# Use the DATABASE_URL .env variable in production environment
# Quote to ensure special characters are urlencoded

DATABASE_URL=(
    "postgres://{}:{}@{}:{}/{}".format(
        quote(config("USER")),quote(config("PASSWORD")),
        config("HOST"),config("PORT"),quote(config("NAME"))
    )
    if DEBUG 
    else config("DATABASE_URL")
)

# conn_max_age makes the connection persistent rather
# than recreating it every request cycle

DATABASES = {
    'default': dj_database_url.parse(
        DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT= BASE_DIR/'staticfiles'

STATICFILES_DIRS= [BASE_DIR/'static']

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# RESTFRAMEWORK SETTINGS

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES" : ["knox.auth.TokenAuthentication",],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


# KNOX SETTINGS

REST_KNOX = {
    "TOKEN_TTL" : timedelta(days=1),
    "AUTH_HEADER_PREFIX": "Bearer",
}


# DJ-REST-AUTH SETTINGS

REST_AUTH = {
    'OLD_PASSWORD_FIELD_ENABLED': True, # old password is required during password change
    'LOGOUT_ON_PASSWORD_CHANGE': True, # forcefully logged out after password change
}

SITE_ID = 1


# ALLAUTH SETTINGS

AUTHENTICATION_BACKENDS = [
   'django.contrib.auth.backends.ModelBackend', # Needed to login by username in Django admin, regardless of `allauth`
   'allauth.account.auth_backends.AuthenticationBackend', # `allauth` specific authentication methods, such as login by email
]


# Authentication and Verification

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_AUTHENTICATION_METHOD = 'email'

ACCOUNT_ADAPTER = 'pocket.views.PortfolioAPIAccountAdapter'

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3


# Email Configuration

EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"

DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")

ANYMAIL = {
    "MAILJET_API_KEY":config("MAILJET_API_KEY"),
    "MAILJET_SECRET_KEY":config("MAILJET_SECRET_KEY"),
}


# Application Schema and Documentation

VERSION="1.0.0"

SPECTACULAR_SETTINGS = {
    "TITLE": "Personal Portfolio API",
    "DESCRIPTION": "<p>A database interface for both your portfolio and portfolio manager. \
        The portfolio manager allows you to perform read and write operations<br/>\
        to keep your information up-to-date, allowing your portfolio to display all \
        your relevant information.</p>\
        <h2>Let's Get Started</h2>\
        <ol>\
        <li>Register your account</li>\
        <li>Check your inbox to verify your email</li>\
        <li>Login with your valid credentials</li>\
        <li>In the authorize tab, submit the token supplied after logging in</li>\
        </ol>\
        <p>Once you are finished, logout from the Logout endpoint to invalidate the token,\
        then logout from the Authorize tab to discard the token from swagger ui.<br/>\
        Simply logging out from the Authorize tab doesn't invalidate the token and it can\
        still be used to access your information</p>\
        <p><strong>NOTE:</strong> Swagger doesn't persist authorization details on page reload.\
        Therefore, save your token to resubmit it in case you accidentally reload the page.</p>",
    "VERSION": VERSION,
    "CONTACT":{
        "name":"George Mobisa",
        "email":"georgemobisa23@outlook.com",
    },
}


# External API Interaction

CORS_ALLOW_ALL_ORIGINS = True

CSRF_TRUSTED_ORIGINS = [
    "https://portfolio-api-vwdg.onrender.com",
]